/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const APPROVE_DISCRIMINATOR = 4;
export declare function getApproveDiscriminatorBytes(): ReadonlyUint8Array;
export type ApproveInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountSource extends string | AccountMeta<string> = string, TAccountDelegate extends string | AccountMeta<string> = string, TAccountOwner extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSource extends string ? WritableAccount<TAccountSource> : TAccountSource,
    TAccountDelegate extends string ? ReadonlyAccount<TAccountDelegate> : TAccountDelegate,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type ApproveInstructionData = {
    discriminator: number;
    /** The amount of tokens the delegate is approved for. */
    amount: bigint;
};
export type ApproveInstructionDataArgs = {
    /** The amount of tokens the delegate is approved for. */
    amount: number | bigint;
};
export declare function getApproveInstructionDataEncoder(): FixedSizeEncoder<ApproveInstructionDataArgs>;
export declare function getApproveInstructionDataDecoder(): FixedSizeDecoder<ApproveInstructionData>;
export declare function getApproveInstructionDataCodec(): FixedSizeCodec<ApproveInstructionDataArgs, ApproveInstructionData>;
export type ApproveInput<TAccountSource extends string = string, TAccountDelegate extends string = string, TAccountOwner extends string = string> = {
    /** The source account. */
    source: Address<TAccountSource>;
    /** The delegate. */
    delegate: Address<TAccountDelegate>;
    /** The source account owner or its multisignature account. */
    owner: Address<TAccountOwner> | TransactionSigner<TAccountOwner>;
    amount: ApproveInstructionDataArgs['amount'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getApproveInstruction<TAccountSource extends string, TAccountDelegate extends string, TAccountOwner extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: ApproveInput<TAccountSource, TAccountDelegate, TAccountOwner>, config?: {
    programAddress?: TProgramAddress;
}): ApproveInstruction<TProgramAddress, TAccountSource, TAccountDelegate, (typeof input)['owner'] extends TransactionSigner<TAccountOwner> ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner> : TAccountOwner>;
export type ParsedApproveInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The source account. */
        source: TAccountMetas[0];
        /** The delegate. */
        delegate: TAccountMetas[1];
        /** The source account owner or its multisignature account. */
        owner: TAccountMetas[2];
    };
    data: ApproveInstructionData;
};
export declare function parseApproveInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedApproveInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=approve.d.ts.map