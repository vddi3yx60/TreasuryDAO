/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_ACCOUNT_DISCRIMINATOR = 1;
export declare function getInitializeAccountDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeAccountInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountAccount extends string | AccountMeta<string> = string, TAccountMint extends string | AccountMeta<string> = string, TAccountOwner extends string | AccountMeta<string> = string, TAccountRent extends string | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountAccount extends string ? WritableAccount<TAccountAccount> : TAccountAccount,
    TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    TAccountRent extends string ? ReadonlyAccount<TAccountRent> : TAccountRent,
    ...TRemainingAccounts
]>;
export type InitializeAccountInstructionData = {
    discriminator: number;
};
export type InitializeAccountInstructionDataArgs = {};
export declare function getInitializeAccountInstructionDataEncoder(): FixedSizeEncoder<InitializeAccountInstructionDataArgs>;
export declare function getInitializeAccountInstructionDataDecoder(): FixedSizeDecoder<InitializeAccountInstructionData>;
export declare function getInitializeAccountInstructionDataCodec(): FixedSizeCodec<InitializeAccountInstructionDataArgs, InitializeAccountInstructionData>;
export type InitializeAccountInput<TAccountAccount extends string = string, TAccountMint extends string = string, TAccountOwner extends string = string, TAccountRent extends string = string> = {
    /** The account to initialize. */
    account: Address<TAccountAccount>;
    /** The mint this account will be associated with. */
    mint: Address<TAccountMint>;
    /** The new account's owner/multisignature. */
    owner: Address<TAccountOwner>;
    /** Rent sysvar. */
    rent?: Address<TAccountRent>;
};
export declare function getInitializeAccountInstruction<TAccountAccount extends string, TAccountMint extends string, TAccountOwner extends string, TAccountRent extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: InitializeAccountInput<TAccountAccount, TAccountMint, TAccountOwner, TAccountRent>, config?: {
    programAddress?: TProgramAddress;
}): InitializeAccountInstruction<TProgramAddress, TAccountAccount, TAccountMint, TAccountOwner, TAccountRent>;
export type ParsedInitializeAccountInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The account to initialize. */
        account: TAccountMetas[0];
        /** The mint this account will be associated with. */
        mint: TAccountMetas[1];
        /** The new account's owner/multisignature. */
        owner: TAccountMetas[2];
        /** Rent sysvar. */
        rent: TAccountMetas[3];
    };
    data: InitializeAccountInstructionData;
};
export declare function parseInitializeAccountInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedInitializeAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeAccount.d.ts.map