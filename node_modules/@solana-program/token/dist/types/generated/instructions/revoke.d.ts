/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const REVOKE_DISCRIMINATOR = 5;
export declare function getRevokeDiscriminatorBytes(): ReadonlyUint8Array;
export type RevokeInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountSource extends string | AccountMeta<string> = string, TAccountOwner extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSource extends string ? WritableAccount<TAccountSource> : TAccountSource,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type RevokeInstructionData = {
    discriminator: number;
};
export type RevokeInstructionDataArgs = {};
export declare function getRevokeInstructionDataEncoder(): FixedSizeEncoder<RevokeInstructionDataArgs>;
export declare function getRevokeInstructionDataDecoder(): FixedSizeDecoder<RevokeInstructionData>;
export declare function getRevokeInstructionDataCodec(): FixedSizeCodec<RevokeInstructionDataArgs, RevokeInstructionData>;
export type RevokeInput<TAccountSource extends string = string, TAccountOwner extends string = string> = {
    /** The source account. */
    source: Address<TAccountSource>;
    /** The source account owner or its multisignature. */
    owner: Address<TAccountOwner> | TransactionSigner<TAccountOwner>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getRevokeInstruction<TAccountSource extends string, TAccountOwner extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: RevokeInput<TAccountSource, TAccountOwner>, config?: {
    programAddress?: TProgramAddress;
}): RevokeInstruction<TProgramAddress, TAccountSource, (typeof input)['owner'] extends TransactionSigner<TAccountOwner> ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner> : TAccountOwner>;
export type ParsedRevokeInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The source account. */
        source: TAccountMetas[0];
        /** The source account owner or its multisignature. */
        owner: TAccountMetas[1];
    };
    data: RevokeInstructionData;
};
export declare function parseRevokeInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedRevokeInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=revoke.d.ts.map