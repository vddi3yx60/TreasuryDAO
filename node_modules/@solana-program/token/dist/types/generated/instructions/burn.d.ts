/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const BURN_DISCRIMINATOR = 8;
export declare function getBurnDiscriminatorBytes(): ReadonlyUint8Array;
export type BurnInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountAccount extends string | AccountMeta<string> = string, TAccountMint extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountAccount extends string ? WritableAccount<TAccountAccount> : TAccountAccount,
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type BurnInstructionData = {
    /** The amount of tokens to burn. */
    discriminator: number;
    amount: bigint;
};
export type BurnInstructionDataArgs = {
    amount: number | bigint;
};
export declare function getBurnInstructionDataEncoder(): FixedSizeEncoder<BurnInstructionDataArgs>;
export declare function getBurnInstructionDataDecoder(): FixedSizeDecoder<BurnInstructionData>;
export declare function getBurnInstructionDataCodec(): FixedSizeCodec<BurnInstructionDataArgs, BurnInstructionData>;
export type BurnInput<TAccountAccount extends string = string, TAccountMint extends string = string, TAccountAuthority extends string = string> = {
    /** The account to burn from. */
    account: Address<TAccountAccount>;
    /** The token mint. */
    mint: Address<TAccountMint>;
    /** The account's owner/delegate or its multisignature account. */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
    amount: BurnInstructionDataArgs['amount'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getBurnInstruction<TAccountAccount extends string, TAccountMint extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: BurnInput<TAccountAccount, TAccountMint, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): BurnInstruction<TProgramAddress, TAccountAccount, TAccountMint, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedBurnInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The account to burn from. */
        account: TAccountMetas[0];
        /** The token mint. */
        mint: TAccountMetas[1];
        /** The account's owner/delegate or its multisignature account. */
        authority: TAccountMetas[2];
    };
    data: BurnInstructionData;
};
export declare function parseBurnInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedBurnInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=burn.d.ts.map