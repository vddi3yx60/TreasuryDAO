/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const APPROVE_CHECKED_DISCRIMINATOR = 13;
export declare function getApproveCheckedDiscriminatorBytes(): ReadonlyUint8Array;
export type ApproveCheckedInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountSource extends string | AccountMeta<string> = string, TAccountMint extends string | AccountMeta<string> = string, TAccountDelegate extends string | AccountMeta<string> = string, TAccountOwner extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSource extends string ? WritableAccount<TAccountSource> : TAccountSource,
    TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
    TAccountDelegate extends string ? ReadonlyAccount<TAccountDelegate> : TAccountDelegate,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type ApproveCheckedInstructionData = {
    discriminator: number;
    /** The amount of tokens the delegate is approved for. */
    amount: bigint;
    /** Expected number of base 10 digits to the right of the decimal place. */
    decimals: number;
};
export type ApproveCheckedInstructionDataArgs = {
    /** The amount of tokens the delegate is approved for. */
    amount: number | bigint;
    /** Expected number of base 10 digits to the right of the decimal place. */
    decimals: number;
};
export declare function getApproveCheckedInstructionDataEncoder(): FixedSizeEncoder<ApproveCheckedInstructionDataArgs>;
export declare function getApproveCheckedInstructionDataDecoder(): FixedSizeDecoder<ApproveCheckedInstructionData>;
export declare function getApproveCheckedInstructionDataCodec(): FixedSizeCodec<ApproveCheckedInstructionDataArgs, ApproveCheckedInstructionData>;
export type ApproveCheckedInput<TAccountSource extends string = string, TAccountMint extends string = string, TAccountDelegate extends string = string, TAccountOwner extends string = string> = {
    /** The source account. */
    source: Address<TAccountSource>;
    /** The token mint. */
    mint: Address<TAccountMint>;
    /** The delegate. */
    delegate: Address<TAccountDelegate>;
    /** The source account owner or its multisignature account. */
    owner: Address<TAccountOwner> | TransactionSigner<TAccountOwner>;
    amount: ApproveCheckedInstructionDataArgs['amount'];
    decimals: ApproveCheckedInstructionDataArgs['decimals'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getApproveCheckedInstruction<TAccountSource extends string, TAccountMint extends string, TAccountDelegate extends string, TAccountOwner extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: ApproveCheckedInput<TAccountSource, TAccountMint, TAccountDelegate, TAccountOwner>, config?: {
    programAddress?: TProgramAddress;
}): ApproveCheckedInstruction<TProgramAddress, TAccountSource, TAccountMint, TAccountDelegate, (typeof input)['owner'] extends TransactionSigner<TAccountOwner> ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner> : TAccountOwner>;
export type ParsedApproveCheckedInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The source account. */
        source: TAccountMetas[0];
        /** The token mint. */
        mint: TAccountMetas[1];
        /** The delegate. */
        delegate: TAccountMetas[2];
        /** The source account owner or its multisignature account. */
        owner: TAccountMetas[3];
    };
    data: ApproveCheckedInstructionData;
};
export declare function parseApproveCheckedInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedApproveCheckedInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=approveChecked.d.ts.map