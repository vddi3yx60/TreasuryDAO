/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASSOCIATED_TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const CREATE_ASSOCIATED_TOKEN_IDEMPOTENT_DISCRIMINATOR = 1;
export declare function getCreateAssociatedTokenIdempotentDiscriminatorBytes(): ReadonlyUint8Array;
export type CreateAssociatedTokenIdempotentInstruction<TProgram extends string = typeof ASSOCIATED_TOKEN_PROGRAM_ADDRESS, TAccountPayer extends string | AccountMeta<string> = string, TAccountAta extends string | AccountMeta<string> = string, TAccountOwner extends string | AccountMeta<string> = string, TAccountMint extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TAccountTokenProgram extends string | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountAta extends string ? WritableAccount<TAccountAta> : TAccountAta,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    ...TRemainingAccounts
]>;
export type CreateAssociatedTokenIdempotentInstructionData = {
    discriminator: number;
};
export type CreateAssociatedTokenIdempotentInstructionDataArgs = {};
export declare function getCreateAssociatedTokenIdempotentInstructionDataEncoder(): FixedSizeEncoder<CreateAssociatedTokenIdempotentInstructionDataArgs>;
export declare function getCreateAssociatedTokenIdempotentInstructionDataDecoder(): FixedSizeDecoder<CreateAssociatedTokenIdempotentInstructionData>;
export declare function getCreateAssociatedTokenIdempotentInstructionDataCodec(): FixedSizeCodec<CreateAssociatedTokenIdempotentInstructionDataArgs, CreateAssociatedTokenIdempotentInstructionData>;
export type CreateAssociatedTokenIdempotentAsyncInput<TAccountPayer extends string = string, TAccountAta extends string = string, TAccountOwner extends string = string, TAccountMint extends string = string, TAccountSystemProgram extends string = string, TAccountTokenProgram extends string = string> = {
    /** Funding account (must be a system account). */
    payer: TransactionSigner<TAccountPayer>;
    /** Associated token account address to be created. */
    ata?: Address<TAccountAta>;
    /** Wallet address for the new associated token account. */
    owner: Address<TAccountOwner>;
    /** The token mint for the new associated token account. */
    mint: Address<TAccountMint>;
    /** System program. */
    systemProgram?: Address<TAccountSystemProgram>;
    /** SPL Token program. */
    tokenProgram?: Address<TAccountTokenProgram>;
};
export declare function getCreateAssociatedTokenIdempotentInstructionAsync<TAccountPayer extends string, TAccountAta extends string, TAccountOwner extends string, TAccountMint extends string, TAccountSystemProgram extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof ASSOCIATED_TOKEN_PROGRAM_ADDRESS>(input: CreateAssociatedTokenIdempotentAsyncInput<TAccountPayer, TAccountAta, TAccountOwner, TAccountMint, TAccountSystemProgram, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): Promise<CreateAssociatedTokenIdempotentInstruction<TProgramAddress, TAccountPayer, TAccountAta, TAccountOwner, TAccountMint, TAccountSystemProgram, TAccountTokenProgram>>;
export type CreateAssociatedTokenIdempotentInput<TAccountPayer extends string = string, TAccountAta extends string = string, TAccountOwner extends string = string, TAccountMint extends string = string, TAccountSystemProgram extends string = string, TAccountTokenProgram extends string = string> = {
    /** Funding account (must be a system account). */
    payer: TransactionSigner<TAccountPayer>;
    /** Associated token account address to be created. */
    ata: Address<TAccountAta>;
    /** Wallet address for the new associated token account. */
    owner: Address<TAccountOwner>;
    /** The token mint for the new associated token account. */
    mint: Address<TAccountMint>;
    /** System program. */
    systemProgram?: Address<TAccountSystemProgram>;
    /** SPL Token program. */
    tokenProgram?: Address<TAccountTokenProgram>;
};
export declare function getCreateAssociatedTokenIdempotentInstruction<TAccountPayer extends string, TAccountAta extends string, TAccountOwner extends string, TAccountMint extends string, TAccountSystemProgram extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof ASSOCIATED_TOKEN_PROGRAM_ADDRESS>(input: CreateAssociatedTokenIdempotentInput<TAccountPayer, TAccountAta, TAccountOwner, TAccountMint, TAccountSystemProgram, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): CreateAssociatedTokenIdempotentInstruction<TProgramAddress, TAccountPayer, TAccountAta, TAccountOwner, TAccountMint, TAccountSystemProgram, TAccountTokenProgram>;
export type ParsedCreateAssociatedTokenIdempotentInstruction<TProgram extends string = typeof ASSOCIATED_TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Funding account (must be a system account). */
        payer: TAccountMetas[0];
        /** Associated token account address to be created. */
        ata: TAccountMetas[1];
        /** Wallet address for the new associated token account. */
        owner: TAccountMetas[2];
        /** The token mint for the new associated token account. */
        mint: TAccountMetas[3];
        /** System program. */
        systemProgram: TAccountMetas[4];
        /** SPL Token program. */
        tokenProgram: TAccountMetas[5];
    };
    data: CreateAssociatedTokenIdempotentInstructionData;
};
export declare function parseCreateAssociatedTokenIdempotentInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCreateAssociatedTokenIdempotentInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=createAssociatedTokenIdempotent.d.ts.map