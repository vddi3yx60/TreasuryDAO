/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_MULTISIG2_DISCRIMINATOR = 19;
export declare function getInitializeMultisig2DiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeMultisig2Instruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMultisig extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMultisig extends string ? WritableAccount<TAccountMultisig> : TAccountMultisig,
    ...TRemainingAccounts
]>;
export type InitializeMultisig2InstructionData = {
    discriminator: number;
    /** The number of signers (M) required to validate this multisignature account. */
    m: number;
};
export type InitializeMultisig2InstructionDataArgs = {
    /** The number of signers (M) required to validate this multisignature account. */
    m: number;
};
export declare function getInitializeMultisig2InstructionDataEncoder(): FixedSizeEncoder<InitializeMultisig2InstructionDataArgs>;
export declare function getInitializeMultisig2InstructionDataDecoder(): FixedSizeDecoder<InitializeMultisig2InstructionData>;
export declare function getInitializeMultisig2InstructionDataCodec(): FixedSizeCodec<InitializeMultisig2InstructionDataArgs, InitializeMultisig2InstructionData>;
export type InitializeMultisig2Input<TAccountMultisig extends string = string> = {
    /** The multisignature account to initialize. */
    multisig: Address<TAccountMultisig>;
    m: InitializeMultisig2InstructionDataArgs['m'];
    signers: Array<Address>;
};
export declare function getInitializeMultisig2Instruction<TAccountMultisig extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: InitializeMultisig2Input<TAccountMultisig>, config?: {
    programAddress?: TProgramAddress;
}): InitializeMultisig2Instruction<TProgramAddress, TAccountMultisig>;
export type ParsedInitializeMultisig2Instruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The multisignature account to initialize. */
        multisig: TAccountMetas[0];
    };
    data: InitializeMultisig2InstructionData;
};
export declare function parseInitializeMultisig2Instruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedInitializeMultisig2Instruction<TProgram, TAccountMetas>;
//# sourceMappingURL=initializeMultisig2.d.ts.map