/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const MINT_TO_DISCRIMINATOR = 7;
export declare function getMintToDiscriminatorBytes(): ReadonlyUint8Array;
export type MintToInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMint extends string | AccountMeta<string> = string, TAccountToken extends string | AccountMeta<string> = string, TAccountMintAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountMint extends string ? WritableAccount<TAccountMint> : TAccountMint,
    TAccountToken extends string ? WritableAccount<TAccountToken> : TAccountToken,
    TAccountMintAuthority extends string ? ReadonlyAccount<TAccountMintAuthority> : TAccountMintAuthority,
    ...TRemainingAccounts
]>;
export type MintToInstructionData = {
    discriminator: number;
    /** The amount of new tokens to mint. */
    amount: bigint;
};
export type MintToInstructionDataArgs = {
    /** The amount of new tokens to mint. */
    amount: number | bigint;
};
export declare function getMintToInstructionDataEncoder(): FixedSizeEncoder<MintToInstructionDataArgs>;
export declare function getMintToInstructionDataDecoder(): FixedSizeDecoder<MintToInstructionData>;
export declare function getMintToInstructionDataCodec(): FixedSizeCodec<MintToInstructionDataArgs, MintToInstructionData>;
export type MintToInput<TAccountMint extends string = string, TAccountToken extends string = string, TAccountMintAuthority extends string = string> = {
    /** The mint account. */
    mint: Address<TAccountMint>;
    /** The account to mint tokens to. */
    token: Address<TAccountToken>;
    /** The mint's minting authority or its multisignature account. */
    mintAuthority: Address<TAccountMintAuthority> | TransactionSigner<TAccountMintAuthority>;
    amount: MintToInstructionDataArgs['amount'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getMintToInstruction<TAccountMint extends string, TAccountToken extends string, TAccountMintAuthority extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: MintToInput<TAccountMint, TAccountToken, TAccountMintAuthority>, config?: {
    programAddress?: TProgramAddress;
}): MintToInstruction<TProgramAddress, TAccountMint, TAccountToken, (typeof input)['mintAuthority'] extends TransactionSigner<TAccountMintAuthority> ? ReadonlySignerAccount<TAccountMintAuthority> & AccountSignerMeta<TAccountMintAuthority> : TAccountMintAuthority>;
export type ParsedMintToInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The mint account. */
        mint: TAccountMetas[0];
        /** The account to mint tokens to. */
        token: TAccountMetas[1];
        /** The mint's minting authority or its multisignature account. */
        mintAuthority: TAccountMetas[2];
    };
    data: MintToInstructionData;
};
export declare function parseMintToInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedMintToInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=mintTo.d.ts.map