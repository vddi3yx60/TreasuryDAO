/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const CLOSE_ACCOUNT_DISCRIMINATOR = 9;
export declare function getCloseAccountDiscriminatorBytes(): ReadonlyUint8Array;
export type CloseAccountInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountAccount extends string | AccountMeta<string> = string, TAccountDestination extends string | AccountMeta<string> = string, TAccountOwner extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountAccount extends string ? WritableAccount<TAccountAccount> : TAccountAccount,
    TAccountDestination extends string ? WritableAccount<TAccountDestination> : TAccountDestination,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type CloseAccountInstructionData = {
    discriminator: number;
};
export type CloseAccountInstructionDataArgs = {};
export declare function getCloseAccountInstructionDataEncoder(): FixedSizeEncoder<CloseAccountInstructionDataArgs>;
export declare function getCloseAccountInstructionDataDecoder(): FixedSizeDecoder<CloseAccountInstructionData>;
export declare function getCloseAccountInstructionDataCodec(): FixedSizeCodec<CloseAccountInstructionDataArgs, CloseAccountInstructionData>;
export type CloseAccountInput<TAccountAccount extends string = string, TAccountDestination extends string = string, TAccountOwner extends string = string> = {
    /** The account to close. */
    account: Address<TAccountAccount>;
    /** The destination account. */
    destination: Address<TAccountDestination>;
    /** The account's owner or its multisignature account. */
    owner: Address<TAccountOwner> | TransactionSigner<TAccountOwner>;
    multiSigners?: Array<TransactionSigner>;
};
export declare function getCloseAccountInstruction<TAccountAccount extends string, TAccountDestination extends string, TAccountOwner extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: CloseAccountInput<TAccountAccount, TAccountDestination, TAccountOwner>, config?: {
    programAddress?: TProgramAddress;
}): CloseAccountInstruction<TProgramAddress, TAccountAccount, TAccountDestination, (typeof input)['owner'] extends TransactionSigner<TAccountOwner> ? ReadonlySignerAccount<TAccountOwner> & AccountSignerMeta<TAccountOwner> : TAccountOwner>;
export type ParsedCloseAccountInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The account to close. */
        account: TAccountMetas[0];
        /** The destination account. */
        destination: TAccountMetas[1];
        /** The account's owner or its multisignature account. */
        owner: TAccountMetas[2];
    };
    data: CloseAccountInstructionData;
};
export declare function parseCloseAccountInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCloseAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=closeAccount.d.ts.map