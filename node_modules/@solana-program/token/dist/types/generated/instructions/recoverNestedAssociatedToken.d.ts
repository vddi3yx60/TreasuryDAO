/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASSOCIATED_TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const RECOVER_NESTED_ASSOCIATED_TOKEN_DISCRIMINATOR = 2;
export declare function getRecoverNestedAssociatedTokenDiscriminatorBytes(): ReadonlyUint8Array;
export type RecoverNestedAssociatedTokenInstruction<TProgram extends string = typeof ASSOCIATED_TOKEN_PROGRAM_ADDRESS, TAccountNestedAssociatedAccountAddress extends string | AccountMeta<string> = string, TAccountNestedTokenMintAddress extends string | AccountMeta<string> = string, TAccountDestinationAssociatedAccountAddress extends string | AccountMeta<string> = string, TAccountOwnerAssociatedAccountAddress extends string | AccountMeta<string> = string, TAccountOwnerTokenMintAddress extends string | AccountMeta<string> = string, TAccountWalletAddress extends string | AccountMeta<string> = string, TAccountTokenProgram extends string | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountNestedAssociatedAccountAddress extends string ? WritableAccount<TAccountNestedAssociatedAccountAddress> : TAccountNestedAssociatedAccountAddress,
    TAccountNestedTokenMintAddress extends string ? ReadonlyAccount<TAccountNestedTokenMintAddress> : TAccountNestedTokenMintAddress,
    TAccountDestinationAssociatedAccountAddress extends string ? WritableAccount<TAccountDestinationAssociatedAccountAddress> : TAccountDestinationAssociatedAccountAddress,
    TAccountOwnerAssociatedAccountAddress extends string ? ReadonlyAccount<TAccountOwnerAssociatedAccountAddress> : TAccountOwnerAssociatedAccountAddress,
    TAccountOwnerTokenMintAddress extends string ? ReadonlyAccount<TAccountOwnerTokenMintAddress> : TAccountOwnerTokenMintAddress,
    TAccountWalletAddress extends string ? WritableSignerAccount<TAccountWalletAddress> & AccountSignerMeta<TAccountWalletAddress> : TAccountWalletAddress,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    ...TRemainingAccounts
]>;
export type RecoverNestedAssociatedTokenInstructionData = {
    discriminator: number;
};
export type RecoverNestedAssociatedTokenInstructionDataArgs = {};
export declare function getRecoverNestedAssociatedTokenInstructionDataEncoder(): FixedSizeEncoder<RecoverNestedAssociatedTokenInstructionDataArgs>;
export declare function getRecoverNestedAssociatedTokenInstructionDataDecoder(): FixedSizeDecoder<RecoverNestedAssociatedTokenInstructionData>;
export declare function getRecoverNestedAssociatedTokenInstructionDataCodec(): FixedSizeCodec<RecoverNestedAssociatedTokenInstructionDataArgs, RecoverNestedAssociatedTokenInstructionData>;
export type RecoverNestedAssociatedTokenAsyncInput<TAccountNestedAssociatedAccountAddress extends string = string, TAccountNestedTokenMintAddress extends string = string, TAccountDestinationAssociatedAccountAddress extends string = string, TAccountOwnerAssociatedAccountAddress extends string = string, TAccountOwnerTokenMintAddress extends string = string, TAccountWalletAddress extends string = string, TAccountTokenProgram extends string = string> = {
    /** Nested associated token account, must be owned by `ownerAssociatedAccountAddress`. */
    nestedAssociatedAccountAddress?: Address<TAccountNestedAssociatedAccountAddress>;
    /** Token mint for the nested associated token account. */
    nestedTokenMintAddress: Address<TAccountNestedTokenMintAddress>;
    /** Wallet's associated token account. */
    destinationAssociatedAccountAddress?: Address<TAccountDestinationAssociatedAccountAddress>;
    /** Owner associated token account address, must be owned by `walletAddress`. */
    ownerAssociatedAccountAddress?: Address<TAccountOwnerAssociatedAccountAddress>;
    /** Token mint for the owner associated token account. */
    ownerTokenMintAddress: Address<TAccountOwnerTokenMintAddress>;
    /** Wallet address for the owner associated token account. */
    walletAddress: TransactionSigner<TAccountWalletAddress>;
    /** SPL Token program. */
    tokenProgram?: Address<TAccountTokenProgram>;
};
export declare function getRecoverNestedAssociatedTokenInstructionAsync<TAccountNestedAssociatedAccountAddress extends string, TAccountNestedTokenMintAddress extends string, TAccountDestinationAssociatedAccountAddress extends string, TAccountOwnerAssociatedAccountAddress extends string, TAccountOwnerTokenMintAddress extends string, TAccountWalletAddress extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof ASSOCIATED_TOKEN_PROGRAM_ADDRESS>(input: RecoverNestedAssociatedTokenAsyncInput<TAccountNestedAssociatedAccountAddress, TAccountNestedTokenMintAddress, TAccountDestinationAssociatedAccountAddress, TAccountOwnerAssociatedAccountAddress, TAccountOwnerTokenMintAddress, TAccountWalletAddress, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): Promise<RecoverNestedAssociatedTokenInstruction<TProgramAddress, TAccountNestedAssociatedAccountAddress, TAccountNestedTokenMintAddress, TAccountDestinationAssociatedAccountAddress, TAccountOwnerAssociatedAccountAddress, TAccountOwnerTokenMintAddress, TAccountWalletAddress, TAccountTokenProgram>>;
export type RecoverNestedAssociatedTokenInput<TAccountNestedAssociatedAccountAddress extends string = string, TAccountNestedTokenMintAddress extends string = string, TAccountDestinationAssociatedAccountAddress extends string = string, TAccountOwnerAssociatedAccountAddress extends string = string, TAccountOwnerTokenMintAddress extends string = string, TAccountWalletAddress extends string = string, TAccountTokenProgram extends string = string> = {
    /** Nested associated token account, must be owned by `ownerAssociatedAccountAddress`. */
    nestedAssociatedAccountAddress: Address<TAccountNestedAssociatedAccountAddress>;
    /** Token mint for the nested associated token account. */
    nestedTokenMintAddress: Address<TAccountNestedTokenMintAddress>;
    /** Wallet's associated token account. */
    destinationAssociatedAccountAddress: Address<TAccountDestinationAssociatedAccountAddress>;
    /** Owner associated token account address, must be owned by `walletAddress`. */
    ownerAssociatedAccountAddress: Address<TAccountOwnerAssociatedAccountAddress>;
    /** Token mint for the owner associated token account. */
    ownerTokenMintAddress: Address<TAccountOwnerTokenMintAddress>;
    /** Wallet address for the owner associated token account. */
    walletAddress: TransactionSigner<TAccountWalletAddress>;
    /** SPL Token program. */
    tokenProgram?: Address<TAccountTokenProgram>;
};
export declare function getRecoverNestedAssociatedTokenInstruction<TAccountNestedAssociatedAccountAddress extends string, TAccountNestedTokenMintAddress extends string, TAccountDestinationAssociatedAccountAddress extends string, TAccountOwnerAssociatedAccountAddress extends string, TAccountOwnerTokenMintAddress extends string, TAccountWalletAddress extends string, TAccountTokenProgram extends string, TProgramAddress extends Address = typeof ASSOCIATED_TOKEN_PROGRAM_ADDRESS>(input: RecoverNestedAssociatedTokenInput<TAccountNestedAssociatedAccountAddress, TAccountNestedTokenMintAddress, TAccountDestinationAssociatedAccountAddress, TAccountOwnerAssociatedAccountAddress, TAccountOwnerTokenMintAddress, TAccountWalletAddress, TAccountTokenProgram>, config?: {
    programAddress?: TProgramAddress;
}): RecoverNestedAssociatedTokenInstruction<TProgramAddress, TAccountNestedAssociatedAccountAddress, TAccountNestedTokenMintAddress, TAccountDestinationAssociatedAccountAddress, TAccountOwnerAssociatedAccountAddress, TAccountOwnerTokenMintAddress, TAccountWalletAddress, TAccountTokenProgram>;
export type ParsedRecoverNestedAssociatedTokenInstruction<TProgram extends string = typeof ASSOCIATED_TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Nested associated token account, must be owned by `ownerAssociatedAccountAddress`. */
        nestedAssociatedAccountAddress: TAccountMetas[0];
        /** Token mint for the nested associated token account. */
        nestedTokenMintAddress: TAccountMetas[1];
        /** Wallet's associated token account. */
        destinationAssociatedAccountAddress: TAccountMetas[2];
        /** Owner associated token account address, must be owned by `walletAddress`. */
        ownerAssociatedAccountAddress: TAccountMetas[3];
        /** Token mint for the owner associated token account. */
        ownerTokenMintAddress: TAccountMetas[4];
        /** Wallet address for the owner associated token account. */
        walletAddress: TAccountMetas[5];
        /** SPL Token program. */
        tokenProgram: TAccountMetas[6];
    };
    data: RecoverNestedAssociatedTokenInstructionData;
};
export declare function parseRecoverNestedAssociatedTokenInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedRecoverNestedAssociatedTokenInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=recoverNestedAssociatedToken.d.ts.map