/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { TOKEN_PROGRAM_ADDRESS } from '../programs';
export declare const TRANSFER_DISCRIMINATOR = 3;
export declare function getTransferDiscriminatorBytes(): ReadonlyUint8Array;
export type TransferInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountSource extends string | AccountMeta<string> = string, TAccountDestination extends string | AccountMeta<string> = string, TAccountAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSource extends string ? WritableAccount<TAccountSource> : TAccountSource,
    TAccountDestination extends string ? WritableAccount<TAccountDestination> : TAccountDestination,
    TAccountAuthority extends string ? ReadonlyAccount<TAccountAuthority> : TAccountAuthority,
    ...TRemainingAccounts
]>;
export type TransferInstructionData = {
    discriminator: number;
    /** The amount of tokens to transfer. */
    amount: bigint;
};
export type TransferInstructionDataArgs = {
    /** The amount of tokens to transfer. */
    amount: number | bigint;
};
export declare function getTransferInstructionDataEncoder(): FixedSizeEncoder<TransferInstructionDataArgs>;
export declare function getTransferInstructionDataDecoder(): FixedSizeDecoder<TransferInstructionData>;
export declare function getTransferInstructionDataCodec(): FixedSizeCodec<TransferInstructionDataArgs, TransferInstructionData>;
export type TransferInput<TAccountSource extends string = string, TAccountDestination extends string = string, TAccountAuthority extends string = string> = {
    /** The source account. */
    source: Address<TAccountSource>;
    /** The destination account. */
    destination: Address<TAccountDestination>;
    /** The source account's owner/delegate or its multisignature account. */
    authority: Address<TAccountAuthority> | TransactionSigner<TAccountAuthority>;
    amount: TransferInstructionDataArgs['amount'];
    multiSigners?: Array<TransactionSigner>;
};
export declare function getTransferInstruction<TAccountSource extends string, TAccountDestination extends string, TAccountAuthority extends string, TProgramAddress extends Address = typeof TOKEN_PROGRAM_ADDRESS>(input: TransferInput<TAccountSource, TAccountDestination, TAccountAuthority>, config?: {
    programAddress?: TProgramAddress;
}): TransferInstruction<TProgramAddress, TAccountSource, TAccountDestination, (typeof input)['authority'] extends TransactionSigner<TAccountAuthority> ? ReadonlySignerAccount<TAccountAuthority> & AccountSignerMeta<TAccountAuthority> : TAccountAuthority>;
export type ParsedTransferInstruction<TProgram extends string = typeof TOKEN_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The source account. */
        source: TAccountMetas[0];
        /** The destination account. */
        destination: TAccountMetas[1];
        /** The source account's owner/delegate or its multisignature account. */
        authority: TAccountMetas[2];
    };
    data: TransferInstructionData;
};
export declare function parseTransferInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedTransferInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=transfer.d.ts.map