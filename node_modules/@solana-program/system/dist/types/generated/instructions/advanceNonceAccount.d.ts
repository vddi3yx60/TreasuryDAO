/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { SYSTEM_PROGRAM_ADDRESS } from '../programs';
export declare const ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR = 4;
export declare function getAdvanceNonceAccountDiscriminatorBytes(): ReadonlyUint8Array;
export type AdvanceNonceAccountInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountNonceAccount extends string | AccountMeta<string> = string, TAccountRecentBlockhashesSysvar extends string | AccountMeta<string> = 'SysvarRecentB1ockHashes11111111111111111111', TAccountNonceAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountNonceAccount extends string ? WritableAccount<TAccountNonceAccount> : TAccountNonceAccount,
    TAccountRecentBlockhashesSysvar extends string ? ReadonlyAccount<TAccountRecentBlockhashesSysvar> : TAccountRecentBlockhashesSysvar,
    TAccountNonceAuthority extends string ? ReadonlySignerAccount<TAccountNonceAuthority> & AccountSignerMeta<TAccountNonceAuthority> : TAccountNonceAuthority,
    ...TRemainingAccounts
]>;
export type AdvanceNonceAccountInstructionData = {
    discriminator: number;
};
export type AdvanceNonceAccountInstructionDataArgs = {};
export declare function getAdvanceNonceAccountInstructionDataEncoder(): FixedSizeEncoder<AdvanceNonceAccountInstructionDataArgs>;
export declare function getAdvanceNonceAccountInstructionDataDecoder(): FixedSizeDecoder<AdvanceNonceAccountInstructionData>;
export declare function getAdvanceNonceAccountInstructionDataCodec(): FixedSizeCodec<AdvanceNonceAccountInstructionDataArgs, AdvanceNonceAccountInstructionData>;
export type AdvanceNonceAccountInput<TAccountNonceAccount extends string = string, TAccountRecentBlockhashesSysvar extends string = string, TAccountNonceAuthority extends string = string> = {
    nonceAccount: Address<TAccountNonceAccount>;
    recentBlockhashesSysvar?: Address<TAccountRecentBlockhashesSysvar>;
    nonceAuthority: TransactionSigner<TAccountNonceAuthority>;
};
export declare function getAdvanceNonceAccountInstruction<TAccountNonceAccount extends string, TAccountRecentBlockhashesSysvar extends string, TAccountNonceAuthority extends string, TProgramAddress extends Address = typeof SYSTEM_PROGRAM_ADDRESS>(input: AdvanceNonceAccountInput<TAccountNonceAccount, TAccountRecentBlockhashesSysvar, TAccountNonceAuthority>, config?: {
    programAddress?: TProgramAddress;
}): AdvanceNonceAccountInstruction<TProgramAddress, TAccountNonceAccount, TAccountRecentBlockhashesSysvar, TAccountNonceAuthority>;
export type ParsedAdvanceNonceAccountInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        nonceAccount: TAccountMetas[0];
        recentBlockhashesSysvar: TAccountMetas[1];
        nonceAuthority: TAccountMetas[2];
    };
    data: AdvanceNonceAccountInstructionData;
};
export declare function parseAdvanceNonceAccountInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedAdvanceNonceAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=advanceNonceAccount.d.ts.map