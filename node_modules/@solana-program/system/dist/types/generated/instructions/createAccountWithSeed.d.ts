/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { SYSTEM_PROGRAM_ADDRESS } from '../programs';
export declare const CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR = 3;
export declare function getCreateAccountWithSeedDiscriminatorBytes(): ReadonlyUint8Array;
export type CreateAccountWithSeedInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountPayer extends string | AccountMeta<string> = string, TAccountNewAccount extends string | AccountMeta<string> = string, TAccountBaseAccount extends string | AccountMeta<string> | undefined = undefined, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & AccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountNewAccount extends string ? WritableAccount<TAccountNewAccount> : TAccountNewAccount,
    ...(TAccountBaseAccount extends undefined ? [] : [
        TAccountBaseAccount extends string ? ReadonlySignerAccount<TAccountBaseAccount> & AccountSignerMeta<TAccountBaseAccount> : TAccountBaseAccount
    ]),
    ...TRemainingAccounts
]>;
export type CreateAccountWithSeedInstructionData = {
    discriminator: number;
    base: Address;
    seed: string;
    amount: bigint;
    space: bigint;
    programAddress: Address;
};
export type CreateAccountWithSeedInstructionDataArgs = {
    base: Address;
    seed: string;
    amount: number | bigint;
    space: number | bigint;
    programAddress: Address;
};
export declare function getCreateAccountWithSeedInstructionDataEncoder(): Encoder<CreateAccountWithSeedInstructionDataArgs>;
export declare function getCreateAccountWithSeedInstructionDataDecoder(): Decoder<CreateAccountWithSeedInstructionData>;
export declare function getCreateAccountWithSeedInstructionDataCodec(): Codec<CreateAccountWithSeedInstructionDataArgs, CreateAccountWithSeedInstructionData>;
export type CreateAccountWithSeedInput<TAccountPayer extends string = string, TAccountNewAccount extends string = string, TAccountBaseAccount extends string = string> = {
    payer: TransactionSigner<TAccountPayer>;
    newAccount: Address<TAccountNewAccount>;
    baseAccount?: TransactionSigner<TAccountBaseAccount>;
    base: CreateAccountWithSeedInstructionDataArgs['base'];
    seed: CreateAccountWithSeedInstructionDataArgs['seed'];
    amount: CreateAccountWithSeedInstructionDataArgs['amount'];
    space: CreateAccountWithSeedInstructionDataArgs['space'];
    programAddress: CreateAccountWithSeedInstructionDataArgs['programAddress'];
};
export declare function getCreateAccountWithSeedInstruction<TAccountPayer extends string, TAccountNewAccount extends string, TAccountBaseAccount extends string, TProgramAddress extends Address = typeof SYSTEM_PROGRAM_ADDRESS>(input: CreateAccountWithSeedInput<TAccountPayer, TAccountNewAccount, TAccountBaseAccount>, config?: {
    programAddress?: TProgramAddress;
}): CreateAccountWithSeedInstruction<TProgramAddress, TAccountPayer, TAccountNewAccount, TAccountBaseAccount>;
export type ParsedCreateAccountWithSeedInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        payer: TAccountMetas[0];
        newAccount: TAccountMetas[1];
        baseAccount?: TAccountMetas[2] | undefined;
    };
    data: CreateAccountWithSeedInstructionData;
};
export declare function parseCreateAccountWithSeedInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCreateAccountWithSeedInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=createAccountWithSeed.d.ts.map