/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { SYSTEM_PROGRAM_ADDRESS } from '../programs';
export declare const WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR = 5;
export declare function getWithdrawNonceAccountDiscriminatorBytes(): ReadonlyUint8Array;
export type WithdrawNonceAccountInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountNonceAccount extends string | AccountMeta<string> = string, TAccountRecipientAccount extends string | AccountMeta<string> = string, TAccountRecentBlockhashesSysvar extends string | AccountMeta<string> = 'SysvarRecentB1ockHashes11111111111111111111', TAccountRentSysvar extends string | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111', TAccountNonceAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountNonceAccount extends string ? WritableAccount<TAccountNonceAccount> : TAccountNonceAccount,
    TAccountRecipientAccount extends string ? WritableAccount<TAccountRecipientAccount> : TAccountRecipientAccount,
    TAccountRecentBlockhashesSysvar extends string ? ReadonlyAccount<TAccountRecentBlockhashesSysvar> : TAccountRecentBlockhashesSysvar,
    TAccountRentSysvar extends string ? ReadonlyAccount<TAccountRentSysvar> : TAccountRentSysvar,
    TAccountNonceAuthority extends string ? ReadonlySignerAccount<TAccountNonceAuthority> & AccountSignerMeta<TAccountNonceAuthority> : TAccountNonceAuthority,
    ...TRemainingAccounts
]>;
export type WithdrawNonceAccountInstructionData = {
    discriminator: number;
    withdrawAmount: bigint;
};
export type WithdrawNonceAccountInstructionDataArgs = {
    withdrawAmount: number | bigint;
};
export declare function getWithdrawNonceAccountInstructionDataEncoder(): FixedSizeEncoder<WithdrawNonceAccountInstructionDataArgs>;
export declare function getWithdrawNonceAccountInstructionDataDecoder(): FixedSizeDecoder<WithdrawNonceAccountInstructionData>;
export declare function getWithdrawNonceAccountInstructionDataCodec(): FixedSizeCodec<WithdrawNonceAccountInstructionDataArgs, WithdrawNonceAccountInstructionData>;
export type WithdrawNonceAccountInput<TAccountNonceAccount extends string = string, TAccountRecipientAccount extends string = string, TAccountRecentBlockhashesSysvar extends string = string, TAccountRentSysvar extends string = string, TAccountNonceAuthority extends string = string> = {
    nonceAccount: Address<TAccountNonceAccount>;
    recipientAccount: Address<TAccountRecipientAccount>;
    recentBlockhashesSysvar?: Address<TAccountRecentBlockhashesSysvar>;
    rentSysvar?: Address<TAccountRentSysvar>;
    nonceAuthority: TransactionSigner<TAccountNonceAuthority>;
    withdrawAmount: WithdrawNonceAccountInstructionDataArgs['withdrawAmount'];
};
export declare function getWithdrawNonceAccountInstruction<TAccountNonceAccount extends string, TAccountRecipientAccount extends string, TAccountRecentBlockhashesSysvar extends string, TAccountRentSysvar extends string, TAccountNonceAuthority extends string, TProgramAddress extends Address = typeof SYSTEM_PROGRAM_ADDRESS>(input: WithdrawNonceAccountInput<TAccountNonceAccount, TAccountRecipientAccount, TAccountRecentBlockhashesSysvar, TAccountRentSysvar, TAccountNonceAuthority>, config?: {
    programAddress?: TProgramAddress;
}): WithdrawNonceAccountInstruction<TProgramAddress, TAccountNonceAccount, TAccountRecipientAccount, TAccountRecentBlockhashesSysvar, TAccountRentSysvar, TAccountNonceAuthority>;
export type ParsedWithdrawNonceAccountInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        nonceAccount: TAccountMetas[0];
        recipientAccount: TAccountMetas[1];
        recentBlockhashesSysvar: TAccountMetas[2];
        rentSysvar: TAccountMetas[3];
        nonceAuthority: TAccountMetas[4];
    };
    data: WithdrawNonceAccountInstructionData;
};
export declare function parseWithdrawNonceAccountInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedWithdrawNonceAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=withdrawNonceAccount.d.ts.map