/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { SYSTEM_PROGRAM_ADDRESS } from '../programs';
export declare const TRANSFER_SOL_WITH_SEED_DISCRIMINATOR = 11;
export declare function getTransferSolWithSeedDiscriminatorBytes(): ReadonlyUint8Array;
export type TransferSolWithSeedInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountSource extends string | AccountMeta<string> = string, TAccountBaseAccount extends string | AccountMeta<string> = string, TAccountDestination extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSource extends string ? WritableAccount<TAccountSource> : TAccountSource,
    TAccountBaseAccount extends string ? ReadonlySignerAccount<TAccountBaseAccount> & AccountSignerMeta<TAccountBaseAccount> : TAccountBaseAccount,
    TAccountDestination extends string ? WritableAccount<TAccountDestination> : TAccountDestination,
    ...TRemainingAccounts
]>;
export type TransferSolWithSeedInstructionData = {
    discriminator: number;
    amount: bigint;
    fromSeed: string;
    fromOwner: Address;
};
export type TransferSolWithSeedInstructionDataArgs = {
    amount: number | bigint;
    fromSeed: string;
    fromOwner: Address;
};
export declare function getTransferSolWithSeedInstructionDataEncoder(): Encoder<TransferSolWithSeedInstructionDataArgs>;
export declare function getTransferSolWithSeedInstructionDataDecoder(): Decoder<TransferSolWithSeedInstructionData>;
export declare function getTransferSolWithSeedInstructionDataCodec(): Codec<TransferSolWithSeedInstructionDataArgs, TransferSolWithSeedInstructionData>;
export type TransferSolWithSeedInput<TAccountSource extends string = string, TAccountBaseAccount extends string = string, TAccountDestination extends string = string> = {
    source: Address<TAccountSource>;
    baseAccount: TransactionSigner<TAccountBaseAccount>;
    destination: Address<TAccountDestination>;
    amount: TransferSolWithSeedInstructionDataArgs['amount'];
    fromSeed: TransferSolWithSeedInstructionDataArgs['fromSeed'];
    fromOwner: TransferSolWithSeedInstructionDataArgs['fromOwner'];
};
export declare function getTransferSolWithSeedInstruction<TAccountSource extends string, TAccountBaseAccount extends string, TAccountDestination extends string, TProgramAddress extends Address = typeof SYSTEM_PROGRAM_ADDRESS>(input: TransferSolWithSeedInput<TAccountSource, TAccountBaseAccount, TAccountDestination>, config?: {
    programAddress?: TProgramAddress;
}): TransferSolWithSeedInstruction<TProgramAddress, TAccountSource, TAccountBaseAccount, TAccountDestination>;
export type ParsedTransferSolWithSeedInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        source: TAccountMetas[0];
        baseAccount: TAccountMetas[1];
        destination: TAccountMetas[2];
    };
    data: TransferSolWithSeedInstructionData;
};
export declare function parseTransferSolWithSeedInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedTransferSolWithSeedInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=transferSolWithSeed.d.ts.map