/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { SYSTEM_PROGRAM_ADDRESS } from '../programs';
export declare const AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR = 7;
export declare function getAuthorizeNonceAccountDiscriminatorBytes(): ReadonlyUint8Array;
export type AuthorizeNonceAccountInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountNonceAccount extends string | AccountMeta<string> = string, TAccountNonceAuthority extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountNonceAccount extends string ? WritableAccount<TAccountNonceAccount> : TAccountNonceAccount,
    TAccountNonceAuthority extends string ? ReadonlySignerAccount<TAccountNonceAuthority> & AccountSignerMeta<TAccountNonceAuthority> : TAccountNonceAuthority,
    ...TRemainingAccounts
]>;
export type AuthorizeNonceAccountInstructionData = {
    discriminator: number;
    newNonceAuthority: Address;
};
export type AuthorizeNonceAccountInstructionDataArgs = {
    newNonceAuthority: Address;
};
export declare function getAuthorizeNonceAccountInstructionDataEncoder(): FixedSizeEncoder<AuthorizeNonceAccountInstructionDataArgs>;
export declare function getAuthorizeNonceAccountInstructionDataDecoder(): FixedSizeDecoder<AuthorizeNonceAccountInstructionData>;
export declare function getAuthorizeNonceAccountInstructionDataCodec(): FixedSizeCodec<AuthorizeNonceAccountInstructionDataArgs, AuthorizeNonceAccountInstructionData>;
export type AuthorizeNonceAccountInput<TAccountNonceAccount extends string = string, TAccountNonceAuthority extends string = string> = {
    nonceAccount: Address<TAccountNonceAccount>;
    nonceAuthority: TransactionSigner<TAccountNonceAuthority>;
    newNonceAuthority: AuthorizeNonceAccountInstructionDataArgs['newNonceAuthority'];
};
export declare function getAuthorizeNonceAccountInstruction<TAccountNonceAccount extends string, TAccountNonceAuthority extends string, TProgramAddress extends Address = typeof SYSTEM_PROGRAM_ADDRESS>(input: AuthorizeNonceAccountInput<TAccountNonceAccount, TAccountNonceAuthority>, config?: {
    programAddress?: TProgramAddress;
}): AuthorizeNonceAccountInstruction<TProgramAddress, TAccountNonceAccount, TAccountNonceAuthority>;
export type ParsedAuthorizeNonceAccountInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        nonceAccount: TAccountMetas[0];
        nonceAuthority: TAccountMetas[1];
    };
    data: AuthorizeNonceAccountInstructionData;
};
export declare function parseAuthorizeNonceAccountInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedAuthorizeNonceAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=authorizeNonceAccount.d.ts.map