/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { SYSTEM_PROGRAM_ADDRESS } from '../programs';
export declare const TRANSFER_SOL_DISCRIMINATOR = 2;
export declare function getTransferSolDiscriminatorBytes(): ReadonlyUint8Array;
export type TransferSolInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountSource extends string | AccountMeta<string> = string, TAccountDestination extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSource extends string ? WritableSignerAccount<TAccountSource> & AccountSignerMeta<TAccountSource> : TAccountSource,
    TAccountDestination extends string ? WritableAccount<TAccountDestination> : TAccountDestination,
    ...TRemainingAccounts
]>;
export type TransferSolInstructionData = {
    discriminator: number;
    amount: bigint;
};
export type TransferSolInstructionDataArgs = {
    amount: number | bigint;
};
export declare function getTransferSolInstructionDataEncoder(): FixedSizeEncoder<TransferSolInstructionDataArgs>;
export declare function getTransferSolInstructionDataDecoder(): FixedSizeDecoder<TransferSolInstructionData>;
export declare function getTransferSolInstructionDataCodec(): FixedSizeCodec<TransferSolInstructionDataArgs, TransferSolInstructionData>;
export type TransferSolInput<TAccountSource extends string = string, TAccountDestination extends string = string> = {
    source: TransactionSigner<TAccountSource>;
    destination: Address<TAccountDestination>;
    amount: TransferSolInstructionDataArgs['amount'];
};
export declare function getTransferSolInstruction<TAccountSource extends string, TAccountDestination extends string, TProgramAddress extends Address = typeof SYSTEM_PROGRAM_ADDRESS>(input: TransferSolInput<TAccountSource, TAccountDestination>, config?: {
    programAddress?: TProgramAddress;
}): TransferSolInstruction<TProgramAddress, TAccountSource, TAccountDestination>;
export type ParsedTransferSolInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        source: TAccountMetas[0];
        destination: TAccountMetas[1];
    };
    data: TransferSolInstructionData;
};
export declare function parseTransferSolInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedTransferSolInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=transferSol.d.ts.map