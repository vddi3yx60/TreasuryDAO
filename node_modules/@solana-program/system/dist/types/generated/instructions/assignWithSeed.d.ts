/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { SYSTEM_PROGRAM_ADDRESS } from '../programs';
export declare const ASSIGN_WITH_SEED_DISCRIMINATOR = 10;
export declare function getAssignWithSeedDiscriminatorBytes(): ReadonlyUint8Array;
export type AssignWithSeedInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountAccount extends string | AccountMeta<string> = string, TAccountBaseAccount extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountAccount extends string ? WritableAccount<TAccountAccount> : TAccountAccount,
    TAccountBaseAccount extends string ? ReadonlySignerAccount<TAccountBaseAccount> & AccountSignerMeta<TAccountBaseAccount> : TAccountBaseAccount,
    ...TRemainingAccounts
]>;
export type AssignWithSeedInstructionData = {
    discriminator: number;
    base: Address;
    seed: string;
    programAddress: Address;
};
export type AssignWithSeedInstructionDataArgs = {
    base: Address;
    seed: string;
    programAddress: Address;
};
export declare function getAssignWithSeedInstructionDataEncoder(): Encoder<AssignWithSeedInstructionDataArgs>;
export declare function getAssignWithSeedInstructionDataDecoder(): Decoder<AssignWithSeedInstructionData>;
export declare function getAssignWithSeedInstructionDataCodec(): Codec<AssignWithSeedInstructionDataArgs, AssignWithSeedInstructionData>;
export type AssignWithSeedInput<TAccountAccount extends string = string, TAccountBaseAccount extends string = string> = {
    account: Address<TAccountAccount>;
    baseAccount: TransactionSigner<TAccountBaseAccount>;
    base: AssignWithSeedInstructionDataArgs['base'];
    seed: AssignWithSeedInstructionDataArgs['seed'];
    programAddress: AssignWithSeedInstructionDataArgs['programAddress'];
};
export declare function getAssignWithSeedInstruction<TAccountAccount extends string, TAccountBaseAccount extends string, TProgramAddress extends Address = typeof SYSTEM_PROGRAM_ADDRESS>(input: AssignWithSeedInput<TAccountAccount, TAccountBaseAccount>, config?: {
    programAddress?: TProgramAddress;
}): AssignWithSeedInstruction<TProgramAddress, TAccountAccount, TAccountBaseAccount>;
export type ParsedAssignWithSeedInstruction<TProgram extends string = typeof SYSTEM_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        account: TAccountMetas[0];
        baseAccount: TAccountMetas[1];
    };
    data: AssignWithSeedInstructionData;
};
export declare function parseAssignWithSeedInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedAssignWithSeedInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=assignWithSeed.d.ts.map