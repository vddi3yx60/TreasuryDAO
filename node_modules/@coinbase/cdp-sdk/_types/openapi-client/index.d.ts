export * from "./generated/coinbaseDeveloperPlatformAPIs.schemas.js";
export * from "./generated/evm-accounts/evm-accounts.js";
export * from "./generated/evm-smart-accounts/evm-smart-accounts.js";
export * from "./generated/evm-swaps/evm-swaps.js";
export * from "./generated/evm-token-balances/evm-token-balances.js";
export * from "./generated/solana-accounts/solana-accounts.js";
export * from "./generated/solana-token-balances/solana-token-balances.js";
export * from "./generated/faucets/faucets.js";
export * from "./generated/policy-engine/policy-engine.js";
export * from "./generated/payments-alpha/payments-alpha.js";
export * from "./generated/onramp/onramp.js";
export * from "./generated/onchain-data/onchain-data.js";
export * from "./generated/end-user-accounts/end-user-accounts.js";
export * from "./generated/x402-facilitator/x402-facilitator.js";
export * from "./generated/sql-api-alpha/sql-api-alpha.js";
export declare const CdpOpenApiClient: {
    configure: (options: import("./cdpApiClient.js").CdpOptions) => void;
    validateEndUserAccessToken: (validateEndUserAccessTokenBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ValidateEndUserAccessTokenBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EndUser>;
    getPaymentMethods: (options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").PaymentMethod[]>;
    getCryptoRails: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").GetCryptoRailsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CryptoRail[]>;
    createPaymentTransferQuote: (createPaymentTransferQuoteBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreatePaymentTransferQuoteBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreatePaymentTransferQuote201>;
    executePaymentTransferQuote: (transferId: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").Transfer>;
    getPaymentTransfer: (transferId: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").Transfer>;
    listPolicies: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListPoliciesParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListPolicies200>;
    createPolicy: (createPolicyBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreatePolicyBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").Policy>;
    getPolicyById: (policyId: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").Policy>;
    deletePolicy: (policyId: string, options?: string | undefined) => Promise<void>;
    updatePolicy: (policyId: string, updatePolicyBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").UpdatePolicyBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").Policy>;
    listTokensForAccount: (network: "base" | "base-sepolia", address: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").AccountTokenAddressesResponse>;
    listDataTokenBalances: (network: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmTokenBalancesNetwork, address: string, params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListDataTokenBalancesParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListDataTokenBalances200>;
    requestEvmFaucet: (requestEvmFaucetBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RequestEvmFaucetBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RequestEvmFaucet200>;
    requestSolanaFaucet: (requestSolanaFaucetBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RequestSolanaFaucetBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RequestSolanaFaucet200>;
    listSolanaTokenBalances: (network: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSolanaTokenBalancesNetwork, address: string, params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSolanaTokenBalancesParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSolanaTokenBalances200>;
    listSolanaAccounts: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSolanaAccountsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSolanaAccounts200>;
    createSolanaAccount: (createSolanaAccountBody?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateSolanaAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    getSolanaAccount: (address: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    updateSolanaAccount: (address: string, updateSolanaAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").UpdateSolanaAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    getSolanaAccountByName: (name: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    importSolanaAccount: (importSolanaAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ImportSolanaAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    exportSolanaAccount: (address: string, exportSolanaAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportSolanaAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportSolanaAccount200>;
    exportSolanaAccountByName: (name: string, exportSolanaAccountByNameBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportSolanaAccountByNameBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportSolanaAccountByName200>;
    signSolanaTransaction: (address: string, signSolanaTransactionBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignSolanaTransactionBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignSolanaTransaction200>;
    signSolanaMessage: (address: string, signSolanaMessageBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignSolanaMessageBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignSolanaMessage200>;
    sendSolanaTransaction: (sendSolanaTransactionBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendSolanaTransactionBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendSolanaTransaction200>;
    listEvmTokenBalances: (network: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmTokenBalancesNetwork, address: string, params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmTokenBalancesParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmTokenBalances200>;
    getEvmSwapPrice: (params: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").GetEvmSwapPriceParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").GetSwapPriceResponseWrapper>;
    createEvmSwapQuote: (createEvmSwapQuoteBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateEvmSwapQuoteBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateSwapQuoteResponseWrapper>;
    listEvmSmartAccounts: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmSmartAccountsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmSmartAccounts200>;
    createEvmSmartAccount: (createEvmSmartAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateEvmSmartAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmSmartAccount>;
    getEvmSmartAccountByName: (name: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmSmartAccount>;
    getEvmSmartAccount: (address: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmSmartAccount>;
    updateEvmSmartAccount: (address: string, updateEvmSmartAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").UpdateEvmSmartAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmSmartAccount>;
    prepareUserOperation: (address: string, prepareUserOperationBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").PrepareUserOperationBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    getUserOperation: (address: string, userOpHash: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    sendUserOperation: (address: string, userOpHash: string, sendUserOperationBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendUserOperationBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    createSpendPermission: (address: string, createSpendPermissionRequest: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateSpendPermissionRequest, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    listSpendPermissions: (address: string, params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSpendPermissionsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSpendPermissions200>;
    revokeSpendPermission: (address: string, revokeSpendPermissionRequest: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RevokeSpendPermissionRequest, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    listEvmAccounts: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmAccountsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmAccounts200>;
    createEvmAccount: (createEvmAccountBody?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateEvmAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    getEvmAccount: (address: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    updateEvmAccount: (address: string, updateEvmAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").UpdateEvmAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    getEvmAccountByName: (name: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    sendEvmTransaction: (address: string, sendEvmTransactionBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendEvmTransactionBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendEvmTransaction200>;
    signEvmTransaction: (address: string, signEvmTransactionBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmTransactionBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmTransaction200>;
    signEvmHash: (address: string, signEvmHashBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmHashBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmHash200>;
    signEvmMessage: (address: string, signEvmMessageBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmMessageBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmMessage200>;
    signEvmTypedData: (address: string, eIP712Message: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EIP712Message, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmTypedData200>;
    importEvmAccount: (importEvmAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ImportEvmAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    exportEvmAccount: (address: string, exportEvmAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportEvmAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportEvmAccount200>;
    exportEvmAccountByName: (name: string, exportEvmAccountByNameBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportEvmAccountByNameBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportEvmAccountByName200>;
};
export declare const OpenApiEvmMethods: {
    requestEvmFaucet: (requestEvmFaucetBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RequestEvmFaucetBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RequestEvmFaucet200>;
    listEvmTokenBalances: (network: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmTokenBalancesNetwork, address: string, params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmTokenBalancesParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmTokenBalances200>;
    getEvmSwapPrice: (params: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").GetEvmSwapPriceParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").GetSwapPriceResponseWrapper>;
    createEvmSwapQuote: (createEvmSwapQuoteBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateEvmSwapQuoteBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateSwapQuoteResponseWrapper>;
    listEvmSmartAccounts: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmSmartAccountsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmSmartAccounts200>;
    createEvmSmartAccount: (createEvmSmartAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateEvmSmartAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmSmartAccount>;
    getEvmSmartAccountByName: (name: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmSmartAccount>;
    getEvmSmartAccount: (address: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmSmartAccount>;
    updateEvmSmartAccount: (address: string, updateEvmSmartAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").UpdateEvmSmartAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmSmartAccount>;
    prepareUserOperation: (address: string, prepareUserOperationBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").PrepareUserOperationBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    getUserOperation: (address: string, userOpHash: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    sendUserOperation: (address: string, userOpHash: string, sendUserOperationBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendUserOperationBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    createSpendPermission: (address: string, createSpendPermissionRequest: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateSpendPermissionRequest, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    listSpendPermissions: (address: string, params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSpendPermissionsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSpendPermissions200>;
    revokeSpendPermission: (address: string, revokeSpendPermissionRequest: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RevokeSpendPermissionRequest, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmUserOperation>;
    listEvmAccounts: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmAccountsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListEvmAccounts200>;
    createEvmAccount: (createEvmAccountBody?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateEvmAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    getEvmAccount: (address: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    updateEvmAccount: (address: string, updateEvmAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").UpdateEvmAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    getEvmAccountByName: (name: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    sendEvmTransaction: (address: string, sendEvmTransactionBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendEvmTransactionBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendEvmTransaction200>;
    signEvmTransaction: (address: string, signEvmTransactionBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmTransactionBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmTransaction200>;
    signEvmHash: (address: string, signEvmHashBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmHashBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmHash200>;
    signEvmMessage: (address: string, signEvmMessageBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmMessageBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmMessage200>;
    signEvmTypedData: (address: string, eIP712Message: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EIP712Message, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignEvmTypedData200>;
    importEvmAccount: (importEvmAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ImportEvmAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").EvmAccount>;
    exportEvmAccount: (address: string, exportEvmAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportEvmAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportEvmAccount200>;
    exportEvmAccountByName: (name: string, exportEvmAccountByNameBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportEvmAccountByNameBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportEvmAccountByName200>;
};
export declare const OpenApiSolanaMethods: {
    requestSolanaFaucet: (requestSolanaFaucetBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RequestSolanaFaucetBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").RequestSolanaFaucet200>;
    listSolanaAccounts: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSolanaAccountsParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListSolanaAccounts200>;
    createSolanaAccount: (createSolanaAccountBody?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreateSolanaAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    getSolanaAccount: (address: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    updateSolanaAccount: (address: string, updateSolanaAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").UpdateSolanaAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    getSolanaAccountByName: (name: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    importSolanaAccount: (importSolanaAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ImportSolanaAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SolanaAccount>;
    exportSolanaAccount: (address: string, exportSolanaAccountBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportSolanaAccountBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportSolanaAccount200>;
    exportSolanaAccountByName: (name: string, exportSolanaAccountByNameBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportSolanaAccountByNameBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ExportSolanaAccountByName200>;
    signSolanaTransaction: (address: string, signSolanaTransactionBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignSolanaTransactionBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignSolanaTransaction200>;
    signSolanaMessage: (address: string, signSolanaMessageBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignSolanaMessageBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SignSolanaMessage200>;
    sendSolanaTransaction: (sendSolanaTransactionBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendSolanaTransactionBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").SendSolanaTransaction200>;
};
export declare const OpenApiPoliciesMethods: {
    listPolicies: (params?: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListPoliciesParams, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").ListPolicies200>;
    createPolicy: (createPolicyBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").CreatePolicyBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").Policy>;
    getPolicyById: (policyId: string, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").Policy>;
    deletePolicy: (policyId: string, options?: string | undefined) => Promise<void>;
    updatePolicy: (policyId: string, updatePolicyBody: import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").UpdatePolicyBody, options?: string | undefined) => Promise<import("./generated/coinbaseDeveloperPlatformAPIs.schemas.js").Policy>;
};
export type CdpOpenApiClientType = typeof CdpOpenApiClient;
//# sourceMappingURL=index.d.ts.map