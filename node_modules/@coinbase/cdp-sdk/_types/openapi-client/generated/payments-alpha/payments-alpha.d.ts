/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import type { CreatePaymentTransferQuote201, CreatePaymentTransferQuoteBody, CryptoRail, GetCryptoRailsParams, PaymentMethod, Transfer } from "../coinbaseDeveloperPlatformAPIs.schemas.js";
import { cdpApiClient } from "../../cdpApiClient.js";
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];
/**
 * Gets the fiat payment methods that can be used to send funds or receive funds. This is the list of payment methods configured for your account.
 * @summary Get the fiat payment methods
 */
export declare const getPaymentMethods: (options?: SecondParameter<typeof cdpApiClient>) => Promise<PaymentMethod[]>;
/**
 * Gets the crypto rails that can be used to send funds or receive funds.
 * @summary Get the crypto rails
 */
export declare const getCryptoRails: (params?: GetCryptoRailsParams, options?: SecondParameter<typeof cdpApiClient>) => Promise<CryptoRail[]>;
/**
 * Creates a new transfer quote, which can then be executed using the Execute a transfer quote endpoint. If you want to automatically execute the transfer without needing to confirm, specify execute as true.
 * @summary Create a transfer quote
 */
export declare const createPaymentTransferQuote: (createPaymentTransferQuoteBody: CreatePaymentTransferQuoteBody, options?: SecondParameter<typeof cdpApiClient>) => Promise<CreatePaymentTransferQuote201>;
/**
 * Executes a transfer quote which was created using the Create a transfer quote endpoint.
 * @summary Execute a transfer quote
 */
export declare const executePaymentTransferQuote: (transferId: string, options?: SecondParameter<typeof cdpApiClient>) => Promise<Transfer>;
/**
 * Gets a transfer by ID.
 * @summary Get a transfer by ID
 */
export declare const getPaymentTransfer: (transferId: string, options?: SecondParameter<typeof cdpApiClient>) => Promise<Transfer>;
export type GetPaymentMethodsResult = NonNullable<Awaited<ReturnType<typeof getPaymentMethods>>>;
export type GetCryptoRailsResult = NonNullable<Awaited<ReturnType<typeof getCryptoRails>>>;
export type CreatePaymentTransferQuoteResult = NonNullable<Awaited<ReturnType<typeof createPaymentTransferQuote>>>;
export type ExecutePaymentTransferQuoteResult = NonNullable<Awaited<ReturnType<typeof executePaymentTransferQuote>>>;
export type GetPaymentTransferResult = NonNullable<Awaited<ReturnType<typeof getPaymentTransfer>>>;
export {};
//# sourceMappingURL=payments-alpha.d.ts.map